C251 COMPILER V5.60.0,  PID                                                                20/06/23  00:03:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Out_File\PID.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\USER\src\PID.c XSMALL WARNINGLEVEL(0) BROWSE INCDIR(..\..\Libraries
                    -\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\
                    -..\DIANCI;..\..\..\..\18--------) DEBUG PRINT(.\Out_File\PID.lst) TABS(2) OBJECT(.\Out_File\PID.obj) 

stmt  level    source

    1          #include "PID.h"
    2          
    3          PIDL_Type_Def  pid_LL;
    4          PIDR_Type_Def  pid_RR;
    5          /*************************************************************************
    6           *  º¯ÊýÃû³Æ£ºfloat constrain_float(float amt, float low, float high)
    7           *  ¹¦ÄÜËµÃ÷£ºÏÞ·ùº¯Êý
    8           *  ²ÎÊýËµÃ÷£º
    9            * @param    amt   £º ²ÎÊý
   10            * @param    low   £º ×îµÍÖµ
   11            * @param    high  £º ×î¸ßÖµ
   12           *  º¯Êý·µ»Ø£ºÎÞ
   13           *  ÐÞ¸ÄÊ±¼ä£º2020Äê4ÔÂ1ÈÕ
   14           *  ±¸    ×¢£º
   15           *************************************************************************/
   16          float constrain_float(float amt, float low, float high)
   17          {
   18   1        return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
   19   1      }
   20          /************************************************
   21          º¯ÊýÃû³Æ£ºPIDL_Init(PIDL_Type_Def *PIDL)
   22          ¹¦    ÄÜ£º³õÊ¼»¯PIDL²ÎÊý
   23          ²Î    Êý£ºPIDL_Type_Def *PIDL
   24          ·µ »Ø Öµ£ºÎÞ
   25          *************************************************/
   26          void PIDL_Init(PIDL_Type_Def *PIDL)
   27          {
   28   1           PIDL->Kp =0;
   29   1           PIDL->Ki =0;
   30   1           PIDL->Kd =0;
   31   1           PIDL->out_p =0; //KpÊä³ö
   32   1           PIDL->out_i =0; //KiÊä³ö
   33   1           PIDL->out_d =0; //KdÊä³ö
   34   1           PIDL->out =0;   //pidÊä³ö
   35   1           PIDL->integrator =0; //»ý·ÖÖµ
   36   1           PIDL->limit =0;//»ý·ÖÏÞ·ù
   37   1           PIDL->error =0;      //µ±Ç°Æ«²î
   38   1           PIDL->last_error =0; //ÉÏ´ÎÎó²î
   39   1           PIDL->last_derivative =0; //ÉÏ´ÎÎó²îÓëÉÏÉÏ´ÎÎó²îÖ®²î
   40   1      }
   41          /************************************************
   42          º¯ÊýÃû³Æ£ºPIDR_Init(PIDR_Type_Def *PIDR)
   43          ¹¦    ÄÜ£º³õÊ¼»¯PIDR²ÎÊý
   44          ²Î    Êý£ºPIDR_Type_Def *PIDL
   45          ·µ »Ø Öµ£ºÎÞ
   46          *************************************************/
   47          void PIDR_Init(PIDR_Type_Def *PIDR)
   48          {
   49   1           PIDR->Kp =0;
   50   1           PIDR->Ki =0;
   51   1           PIDR->Kd =0;
   52   1           PIDR->out_p =0; //KpÊä³ö
   53   1           PIDR->out_i =0; //KiÊä³ö
   54   1           PIDR->out_d =0; //KdÊä³ö
   55   1           PIDR->out =0;   //pidÊä³ö
   56   1           PIDR->integrator =0; //»ý·ÖÖµ
   57   1           PIDR->limit =0;//»ý·ÖÏÞ·ù
C251 COMPILER V5.60.0,  PID                                                                20/06/23  00:03:58  PAGE 2   

   58   1           PIDR->error =0;      //µ±Ç°Æ«²î
   59   1           PIDR->last_error =0; //ÉÏ´ÎÎó²î
   60   1           PIDR->last_derivative =0; //ÉÏ´ÎÎó²îÓëÉÏÉÏ´ÎÎó²îÖ®²î
   61   1      }
   62          
   63          //pwm=Kp*e(k)+Ki*¡Æe(k)+Kd[e£¨k£©-e(k-1)]
   64          // /************************************************
   65          // º¯ÊýÃû³Æ £º PID_Loc(float SetValue,float ActualValue,PIDL_Type_Def *PIDL)
   66          // ¹¦    ÄÜ £º Î»ÖÃÊ½PID
   67          // ²Î    Êý £º SetValue ------ ÉèÖÃÖµ(ÆÚÍûÖµ)
   68          //             ActualValue --- Êµ¼ÊÖµ(·´À¡Öµ)
   69          //             PID ----------- PIDÊý¾Ý½á¹¹
   70          // ·µ »Ø Öµ £º PIDL->out -------- Êä³ö
   71          // *************************************************/
   72          // float PIDL_Loc(float error_L,PIDL_Type_Def *PIDL)
   73          // {
   74          //        PIDL->error = error_L;                                           //ÏÖÔÚÎó²î
   75          //        PIDL->integrator += PIDL->error;                                                //Îó²îÀÛ»ý      
             - 
   76          //        PIDL->integrator = PIDL->integrator > PIDL->limit?PIDL->limit:PIDL->integrator; //»ý·ÖÏÞ·ù
   77          //        PIDL->last_derivative = PIDL->error - PIDL->last_error;
   78          //        PIDL->out_p = PIDL->Kp *  PIDL->error;                                          //KpÊä³ö
   79          //        PIDL->out_i = PIDL->Ki *  PIDL->integrator;                                     //KiÊä³ö
   80          //        PIDL->out_d = PIDL->Kd *  PIDL->last_derivative;                                //KdÊä³ö
   81          //        PIDL->last_error = PIDL->error;                                                 //±£´æÉÏÒ»´ÎÆ«²
             -î
   82          //        PIDL->out =PIDL->out_p + PIDL->out_i + PIDL->out_d;                             //Êä³ö
   83          //  //ÏÞÖÆ
   84          //        if(PIDL->out > Servo_max)
   85          //     {
   86          //       PIDL->out =  Servo_max;
   87          //     }
   88          //     else if(PIDL->out< Servo_min)
   89          //     {
   90          //       PIDL->out =  Servo_min;
   91          //     }
   92          //       return PIDL->out ; 
   93            
   94            
   95          // }
   96          // float PIDR_Loc(float error_R,PIDR_Type_Def *PIDR)
   97          // {
   98          //        PIDR->error = error_R;                                           //ÏÖÔÚÎó²î
   99          //        PIDR->integrator += PIDR->error;                                                //Îó²îÀÛ»ý      
             - 
  100          //        PIDR->integrator = PIDR->integrator > PIDR->limit?PIDR->limit:PIDR->integrator; //»ý·ÖÏÞ·ù
  101          //        PIDR->last_derivative = PIDR->error - PIDR->last_error;
  102          //        PIDR->out_p = PIDR->Kp *  PIDR->error;                                          //KpÊä³ö
  103          //        PIDR->out_i = PIDR->Ki *  PIDR->integrator;                                     //KiÊä³ö
  104          //        PIDR->out_d = PIDR->Kd *  PIDR->last_derivative;                                //KdÊä³ö
  105          //        PIDR->last_error = PIDR->error;                                                 //±£´æÉÏÒ»´ÎÆ«²
             -î
  106          //        PIDR->out =PIDR->out_p + PIDR->out_i + PIDR->out_d;                             //Êä³ö
  107          //  //ÏÞÖÆ
  108          //        if(PIDR->out > Servo_max)
  109          //     {
  110          //       PIDR->out =  Servo_max;
  111          //     }
  112          //     else if(PIDR->out < Servo_min)
  113          //     {
  114          //       PIDR->out =  Servo_min;
  115          //     }
  116          //       return PIDR->out ; 
  117            
  118            
  119          //}
C251 COMPILER V5.60.0,  PID                                                                20/06/23  00:03:58  PAGE 3   

  120          //pwm+=Kp[e£¨k£©-e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  121          /************************************************
  122          º¯ÊýÃû³Æ £º PID_Inc
  123          ¹¦    ÄÜ £º ÔöÁ¿Ê½PID
  124          ²Î    Êý £º SetValue ------ ÉèÖÃÖµ(ÆÚÍûÖµ)
  125                      ActualValue --- Êµ¼ÊÖµ(·´À¡Öµ)
  126                      PID ----------- PIDÊý¾Ý½á¹¹
  127          ·µ »Ø Öµ £º PIDL->out -------- ±¾´ÎPIDÔöÁ¿(+/-)
  128          *************************************************/
  129          float PIDL_Inc(float error_L, PIDL_Type_Def *PIDL)
  130          {
  131   1          
  132   1       
  133   1          PIDL->error = error_L;                                  //¼ÆËãµ±Ç°Æ«²î  
  134   1          PIDL->last_derivative = PIDL->error - PIDL->last_error;
  135   1          PIDL->out_p = PIDL->Kp * PIDL->last_derivative;
  136   1          PIDL->out_i = PIDL->Ki * PIDL->error;
  137   1          PIDL->out_d = PIDL->Kd * (PIDL->error - 2*PIDL->last_error +  PIDL->last_last_error); 
  138   1          PIDL->out = PIDL->out_p + PIDL->out_i + PIDL->out_d;                    //ÔöÁ¿Ê½PID¿ØÖÆÆ÷    
  139   1        
  140   1          PIDL->last_last_error = PIDL->last_error;
  141   1          PIDL->last_error =PIDL->error;
  142   1          //ÔÚmotorÖÐPIDµ÷ÓÃÊ±½øÐÐÁËÏÞ·ù         
  143   1      
  144   1          return PIDL->out;
  145   1      }
  146          
  147          float PIDR_Inc(float error_R, PIDR_Type_Def *PIDR)
  148          {
  149   1          
  150   1       
  151   1          PIDR->error = error_R;                                  //¼ÆËãµ±Ç°Æ«²î  
  152   1          PIDR->last_derivative = PIDR->error - PIDR->last_error;
  153   1          PIDR->out_p = PIDR->Kp * PIDR->last_derivative;
  154   1          PIDR->out_i = PIDR->Ki * PIDR->error;
  155   1          PIDR->out_d = PIDR->Kd * (PIDR->error - 2*PIDR->last_error +  PIDR->last_last_error); 
  156   1          PIDR->out = PIDR->out_p + PIDR->out_i + PIDR->out_d;                    //ÔöÁ¿Ê½PID¿ØÖÆÆ÷    
  157   1        
  158   1          PIDR->last_last_error = PIDR->last_error;
  159   1          PIDR->last_error =PIDR->error;
  160   1      
  161   1        //ÔÚmotorÖÐPIDµ÷ÓÃÊ±½øÐÐÁËÏÞ·ù 
  162   1      
  163   1          return PIDR->out;
  164   1      }
  165          
  166          
  167          
  168          
  169          
  170          
  171          
  172          
  173          
  174          
  175          
  176          
  177          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       690     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  PID                                                                20/06/23  00:03:58  PAGE 4   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       112          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
