C251 COMPILER V5.60.0,  PID                                                                25/06/23  18:35:09  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Out_File\PID.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\USER\src\PID.c XSMALL WARNINGLEVEL(0) BROWSE INCDIR(..\..\Libraries
                    -\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\
                    -..\DIANCI;..\..\..\..\18--------) DEBUG PRINT(.\Out_File\PID.lst) TABS(2) OBJECT(.\Out_File\PID.obj) 

stmt  level    source

    1          #include "PID.h"
    2          
    3          PIDL_Type_Def  pid_LL;
    4          PIDR_Type_Def  pid_RR;
    5          /*************************************************************************
    6           *  º¯ÊýÃû³Æ£ºfloat constrain_float(float amt, float low, float high)
    7           *  ¹¦ÄÜËµÃ÷£ºÏÞ·ùº¯Êý
    8           *  ²ÎÊýËµÃ÷£º
    9            * @param    amt   £º ²ÎÊý
   10            * @param    low   £º ×îµÍÖµ
   11            * @param    high  £º ×î¸ßÖµ
   12           *  º¯Êý·µ»Ø£ºÎÞ
   13           *  ÐÞ¸ÄÊ±¼ä£º2020Äê4ÔÂ1ÈÕ
   14           *  ±¸    ×¢£º
   15           *************************************************************************/
   16          float constrain_float(float amt, float low, float high)
   17          {
   18   1        return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
   19   1      }
   20          /************************************************
   21          º¯ÊýÃû³Æ£ºPIDL_Init(PIDL_Type_Def *PIDL)
   22          ¹¦    ÄÜ£º³õÊ¼»¯PIDL²ÎÊý
   23          ²Î    Êý£ºPIDL_Type_Def *PIDL
   24          ·µ »Ø Öµ£ºÎÞ
   25          *************************************************/
   26          void PIDL_Init(PIDL_Type_Def *PIDL)
   27          {
   28   1           PIDL->Kp =6;
   29   1           PIDL->Ki =2;
   30   1           PIDL->Kd =4;
   31   1        
   32   1           PIDL->out_p =0; //KpÊä³ö
   33   1           PIDL->out_i =0; //KiÊä³ö
   34   1           PIDL->out_d =0; //KdÊä³ö
   35   1           PIDL->out =0;   //pidÊä³ö
   36   1           PIDL->integrator =0; //»ý·ÖÖµ
   37   1           PIDL->limit =0;//»ý·ÖÏÞ·ù
   38   1           PIDL->error =0;      //µ±Ç°Æ«²î
   39   1           PIDL->last_error =0; //ÉÏ´ÎÎó²î
   40   1           PIDL->last_derivative =0; //ÉÏ´ÎÎó²îÓëÉÏÉÏ´ÎÎó²îÖ®²î
   41   1      }
   42          /************************************************
   43          º¯ÊýÃû³Æ£ºPIDR_Init(PIDR_Type_Def *PIDR)
   44          ¹¦    ÄÜ£º³õÊ¼»¯PIDR²ÎÊý
   45          ²Î    Êý£ºPIDR_Type_Def *PIDL
   46          ·µ »Ø Öµ£ºÎÞ
   47          *************************************************/
   48          void PIDR_Init(PIDR_Type_Def *PIDR)
   49          {
   50   1           PIDR->Kp =6;
   51   1           PIDR->Ki =2;
   52   1           PIDR->Kd =4;
   53   1           PIDR->out_p =0; //KpÊä³ö
   54   1           PIDR->out_i =0; //KiÊä³ö
   55   1           PIDR->out_d =0; //KdÊä³ö
   56   1           PIDR->out =0;   //pidÊä³ö
   57   1           PIDR->integrator =0; //»ý·ÖÖµ
C251 COMPILER V5.60.0,  PID                                                                25/06/23  18:35:09  PAGE 2   

   58   1           PIDR->limit =0;//»ý·ÖÏÞ·ù
   59   1           PIDR->error =0;      //µ±Ç°Æ«²î
   60   1           PIDR->last_error =0; //ÉÏ´ÎÎó²î
   61   1           PIDR->last_derivative =0; //ÉÏ´ÎÎó²îÓëÉÏÉÏ´ÎÎó²îÖ®²î
   62   1      }
   63          //°ÑÏÂÃæÎ»ÖÃÊ½PIDÆÁ±ÎÁË£¬ÔÚ¶æ»ú£¨direction.c£©ÖÐÖ±½ÓÓÃÁËPD
   64          //pwm=Kp*e(k)+Ki*¡Æe(k)+Kd[e£¨k£©-e(k-1)]
   65          // /************************************************
   66          // º¯ÊýÃû³Æ £º PID_Loc(float SetValue,float ActualValue,PIDL_Type_Def *PIDL)
   67          // ¹¦    ÄÜ £º Î»ÖÃÊ½PID
   68          // ²Î    Êý £º SetValue ------ ÉèÖÃÖµ(ÆÚÍûÖµ)
   69          //             ActualValue --- Êµ¼ÊÖµ(·´À¡Öµ)
   70          //             PID ----------- PIDÊý¾Ý½á¹¹
   71          // ·µ »Ø Öµ £º PIDL->out -------- Êä³ö
   72          // *************************************************/
   73          // float PIDL_Loc(float error_L,PIDL_Type_Def *PIDL)
   74          // {
   75          //        PIDL->error = error_L;                                           //ÏÖÔÚÎó²î
   76          //        PIDL->integrator += PIDL->error;                                                //Îó²îÀÛ»ý      
             - 
   77          //        PIDL->integrator = PIDL->integrator > PIDL->limit?PIDL->limit:PIDL->integrator; //»ý·ÖÏÞ·ù
   78          //        PIDL->last_derivative = PIDL->error - PIDL->last_error;
   79          //        PIDL->out_p = PIDL->Kp *  PIDL->error;                                          //KpÊä³ö
   80          //        PIDL->out_i = PIDL->Ki *  PIDL->integrator;                                     //KiÊä³ö
   81          //        PIDL->out_d = PIDL->Kd *  PIDL->last_derivative;                                //KdÊä³ö
   82          //        PIDL->last_error = PIDL->error;                                                 //±£´æÉÏÒ»´ÎÆ«²
             -î
   83          //        PIDL->out =PIDL->out_p + PIDL->out_i + PIDL->out_d;                             //Êä³ö
   84          //  //ÏÞÖÆ
   85          //        if(PIDL->out > Servo_max)
   86          //     {
   87          //       PIDL->out =  Servo_max;
   88          //     }
   89          //     else if(PIDL->out< Servo_min)
   90          //     {
   91          //       PIDL->out =  Servo_min;
   92          //     }
   93          //       return PIDL->out ; 
   94            
   95            
   96          // }
   97          // float PIDR_Loc(float error_R,PIDR_Type_Def *PIDR)
   98          // {
   99          //        PIDR->error = error_R;                                           //ÏÖÔÚÎó²î
  100          //        PIDR->integrator += PIDR->error;                                                //Îó²îÀÛ»ý      
             - 
  101          //        PIDR->integrator = PIDR->integrator > PIDR->limit?PIDR->limit:PIDR->integrator; //»ý·ÖÏÞ·ù
  102          //        PIDR->last_derivative = PIDR->error - PIDR->last_error;
  103          //        PIDR->out_p = PIDR->Kp *  PIDR->error;                                          //KpÊä³ö
  104          //        PIDR->out_i = PIDR->Ki *  PIDR->integrator;                                     //KiÊä³ö
  105          //        PIDR->out_d = PIDR->Kd *  PIDR->last_derivative;                                //KdÊä³ö
  106          //        PIDR->last_error = PIDR->error;                                                 //±£´æÉÏÒ»´ÎÆ«²
             -î
  107          //        PIDR->out =PIDR->out_p + PIDR->out_i + PIDR->out_d;                             //Êä³ö
  108          //  //ÏÞÖÆ
  109          //        if(PIDR->out > Servo_max)
  110          //     {
  111          //       PIDR->out =  Servo_max;
  112          //     }
  113          //     else if(PIDR->out < Servo_min)
  114          //     {
  115          //       PIDR->out =  Servo_min;
  116          //     }
  117          //       return PIDR->out ; 
  118            
  119            
C251 COMPILER V5.60.0,  PID                                                                25/06/23  18:35:09  PAGE 3   

  120          //}
  121          //pwm+=Kp[e£¨k£©-e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
  122          /************************************************
  123          º¯ÊýÃû³Æ £º PID_Inc
  124          ¹¦    ÄÜ £º ÔöÁ¿Ê½PID
  125          ²Î    Êý £º SetValue ------ ÉèÖÃÖµ(ÆÚÍûÖµ)
  126                      ActualValue --- Êµ¼ÊÖµ(·´À¡Öµ)
  127                      PID ----------- PIDÊý¾Ý½á¹¹
  128          ·µ »Ø Öµ £º PIDL->out -------- ±¾´ÎPIDÔöÁ¿(+/-)
  129          *************************************************/
  130          float PIDL_Inc(float error_L, PIDL_Type_Def *PIDL)
  131          {
  132   1          
  133   1       
  134   1          PIDL->error = error_L;                                  //¼ÆËãµ±Ç°Æ«²î  
  135   1          PIDL->last_derivative = PIDL->error - PIDL->last_error;
  136   1          PIDL->out_p = PIDL->Kp * PIDL->last_derivative;
  137   1          PIDL->out_i = PIDL->Ki * PIDL->error;
  138   1          PIDL->out_d = PIDL->Kd * (PIDL->error - 2*PIDL->last_error +  PIDL->last_last_error); 
  139   1          PIDL->out = PIDL->out_p + PIDL->out_i + PIDL->out_d;                    //ÔöÁ¿Ê½PID¿ØÖÆÆ÷    
  140   1        
  141   1          PIDL->last_last_error = PIDL->last_error;
  142   1          PIDL->last_error =PIDL->error;
  143   1          //ÔÚmotorÖÐPIDµ÷ÓÃÊ±½øÐÐÁËÏÞ·ù         
  144   1      
  145   1          return PIDL->out;
  146   1      }
  147          
  148          float PIDR_Inc(float error_R, PIDR_Type_Def *PIDR)
  149          {
  150   1          
  151   1       
  152   1          PIDR->error = error_R;                                  //¼ÆËãµ±Ç°Æ«²î  
  153   1          PIDR->last_derivative = PIDR->error - PIDR->last_error;
  154   1          PIDR->out_p = PIDR->Kp * PIDR->last_derivative;
  155   1          PIDR->out_i = PIDR->Ki * PIDR->error;
  156   1          PIDR->out_d = PIDR->Kd * (PIDR->error - 2*PIDR->last_error +  PIDR->last_last_error); 
  157   1          PIDR->out = PIDR->out_p + PIDR->out_i + PIDR->out_d;                    //ÔöÁ¿Ê½PID¿ØÖÆÆ÷    
  158   1        
  159   1          PIDR->last_last_error = PIDR->last_error;
  160   1          PIDR->last_error =PIDR->error;
  161   1      
  162   1        //ÔÚmotorÖÐPIDµ÷ÓÃÊ±½øÐÐÁËÏÞ·ù 
  163   1      
  164   1          return PIDR->out;
  165   1      }
  166          
  167          
  168          
  169          
  170          
  171          
  172          
  173          
  174          
  175          
  176          
  177          
  178          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       718     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  PID                                                                25/06/23  18:35:09  PAGE 4   

  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       112          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
